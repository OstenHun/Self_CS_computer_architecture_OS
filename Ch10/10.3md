<aside>
📎

- 스레드
- 멀티프로세스
- 멀티스레드
</aside>

## 들어가기

### 스레드

→ 실행의 단위; 프로세스를 구성하는 실행의 흐름 단위

→ 프로세스는 여러 개의 스레드 가질 수 있음.

→ 하나의 프로세스에서 여러 부분 동시 실행 가능.

## 프로세스와 스레드

### 단일 스레드 프로세스

→ 모든 프로세스가 하나의 실행 흐름을 가지고 한 번에 하나의 부분만 실행되는 프로세스.

→ 스레드는 프로세스 내에서 각기 다른 스레드 ID, 프로그램 카운터 값을 비롯한 레지스터 값, 스택으로 구성된다.

→ 리눅스에서는 프로세스와 스레드 대신 Task 라는 이름으로 통일하여 명명한다. 둘 모두 “context of execution”으로 간주한다.

### 멀티프로세스와 멀티스레드

### 멀티프로세스

→ 여러 프로세스를 동시에 실행하는 것.

→ 프로세스끼리 자원 공유 X

→ 동일 프로세스 동시 실행 시, 모든 자원이 복제되어 메모리에 적재된다.

→ 하나의 프로세스에 문제가 생겨도 다른 프로세스에는 지장이 적음.

### 멀티스레드

→ 여러 스레드로 프로세스를 동시에 실행하는 것.

→ 스레드끼리 같은 프로세스 내의 자원 공유 O

→ 같은 프로세스 내의 모든 스레드는 주소 공간의 코드, 데이터, 힙 영역을 공유한다. 

→ 멀티프로세스 실행보다 메모리 효율적 사용 가능.

→ 프로세스의 자원을 공유하기에 서로 협력과 통신에 유리.

→ 하나의 스레드에 문제가 생기면 다른 스레드에 영향을 준다.

### 프로세스 간 통신(IPC; Inter-Process Communication)

통신 → 서로 다른 프로세스나 스레드끼리 데이터를 주고받는 것. (e.g. 파일을 통한 프로세스 간 통신)

공유 메모리 → 프로세스들이 공유할 수 있는 메모리 영역 (e.g. 공유 메모리 내 전역 변수)

## 마무리

### 키워드

- 스레드
    - 스레드는 프로세스 내의 실행 흐름 단위
- 멀티프로세스, 멀티스레드
    - 여러 프로세스를 동시에 실행하는 것은 멀티프로세스
    - 여러 스레드로 프로세스를 동시에 실행하는 것은 멀티스레드

### 확인 문제

1번 문제

프로세스 내의 스레드들은 각기 다른 코드/데이터/힙 영역을 가지고 있지 않다.

2번 문제

프로세스끼리는 기본적으로 자원을 공유하지 않지만, 프로세스 내의 스레드끼리는 프로세스 내의 자원을 공유한다.
